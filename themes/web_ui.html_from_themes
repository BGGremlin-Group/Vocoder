<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>BGGG Vocoder V5.0 Web UI</title>
  <style>
    body {
      background-color: #1A1A1A;
      color: #00FFFF;
      font-family: monospace;
      margin: 0;
      padding: 20px;
    }
    h1, h2 {
      border-bottom: 2px solid #00FFFF;
      padding-bottom: 4px;
    }
    section {
      margin-bottom: 30px;
      padding: 20px;
      border: 1px solid #00FFFF;
      border-radius: 8px;
      background-color: #111;
    }
    label {
      display: block;
      margin-top: 10px;
    }
    input, select {
      background-color: #000;
      border: 1px solid #00FFFF;
      color: #00FFFF;
      padding: 6px;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
    }
    button {
      margin-top: 15px;
      background-color: #222;
      border: 1px solid #00FFFF;
      color: #00FFFF;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #00FFFF;
      color: #000;
    }
    footer {
      margin-top: 40px;
      padding: 10px;
      border-top: 1px solid #00FFFF;
      text-align: center;
      font-size: 0.9em;
      color: #00AAAA;
    }
    .help-text {
      font-size: 0.85em;
      color: #00AAAA;
      margin-top: 2px;
    }
  </style>
  <script>
    async function updateConfig() {
      const config = {
        algorithm: document.getElementById('algorithm').value,
        visualization_mode: document.getElementById('vis_mode').value,
        volume: parseFloat(document.getElementById('volume').value),
        modulation_rate: parseFloat(document.getElementById('modulation_rate').value),
        modulation_index: parseFloat(document.getElementById('modulation_index').value),
        pitch_shift: parseInt(document.getElementById('pitch_shift').value)
      };
      const response = await fetch('/update_config', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(config)
      });
      const result = await response.json();
      alert(result.message);
    }

    async function startProcessing() {
      const response = await fetch('/start_processing', { method: 'POST' });
      const result = await response.json();
      alert(result.message);
    }

    async function stopProcessing() {
      const response = await fetch('/stop_processing', { method: 'POST' });
      const result = await response.json();
      alert(result.message);
    }
  </script>
</head>
<body>

  <h1>BGGG Vocoder V5.0 - Web Control Panel</h1>
  <p>Welcome to the BGGG Vocoder Web UI. Use this interface to configure audio processing settings, manage your vocoder parameters, and control live streaming remotely.</p>

  <section>
    <h2>Vocoder Configuration</h2>
    <label for="algorithm">Algorithm</label>
    <select id="algorithm">
      <option value="phase">Phase Vocoder - Best for time-stretching and formant preservation</option>
      <option value="lpc">LPC Vocoder - Good for robotic speech effects</option>
      <option value="channel">Channel Vocoder - Broad-band modulation for creative FX</option>
    </select>
    <div class="help-text">Selects the core vocoding algorithm used for processing audio.</div>

    <label for="pitch_shift">Pitch Shift (semitones)</label>
    <input type="number" id="pitch_shift" value="0" min="-12" max="12">
    <div class="help-text">Shifts pitch of the processed voice up or down in semitones.</div>

    <label for="modulation_index">Modulation Index</label>
    <input type="number" id="modulation_index" value="0.0" step="0.01" min="0.0" max="2.0">
    <div class="help-text">Controls depth of amplitude modulation. 0 = none.</div>

    <label for="modulation_rate">Modulation Rate (Hz)</label>
    <input type="number" id="modulation_rate" value="1.0" min="0.1" max="10" step="0.1">
    <div class="help-text">Frequency of modulation in Hertz. For tremolo and creative FX.</div>

    <label for="volume">Volume</label>
    <input type="number" id="volume" value="1.0" min="0" max="2" step="0.1">
    <div class="help-text">Master volume control (1.0 = normal).</div>
  </section>

  <section>
    <h2>Visualization Settings</h2>
    <label for="vis_mode">Visualization Mode</label>
    <select id="vis_mode">
      <option value="Spectrogram">Spectrogram - 2D frequency analysis</option>
      <option value="3D Waterfall">3D Waterfall - Time/frequency depth view</option>
      <option value="Frequency Bar">Frequency Bar - Simple bar visualization</option>
      <option value="Mel Spectrogram">Mel Spectrogram - Perceptual scale</option>
      <option value="Waveform Envelope">Waveform Envelope - Time domain amplitude</option>
      <option value="Chroma Features">Chroma Features - Pitch class energy</option>
      <option value="3D Particle Swarm">3D Particle Swarm - Reactive animation</option>
    </select>
    <div class="help-text">Choose how to visualize audio input in real time.</div>
  </section>

  <section>
    <h2>Controls</h2>
    <button onclick="updateConfig()">ðŸ’¾ Update Configuration</button>
    <button onclick="startProcessing()">â–¶ Start Processing</button>
    <button onclick="stopProcessing()">â–  Stop Processing</button>
    <div class="help-text">Update your settings before starting for them to take effect.</div>
  </section>

  <footer>
    BGGG Vocoder V5.0 - Developed by the BGGremlin Group<br>
    Licensed under MIT. For best results, use with high-quality microphone and stable network.<br>
    Visit our GitHub for documentation and support.
  </footer>

</body>
</html>
